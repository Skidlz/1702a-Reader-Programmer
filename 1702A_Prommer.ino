#define VPP 3
#define VGG 2

byte PORTB_t = 0x00;
byte PORTC_t = 0x00;
byte PORTD_t = 0x00;

byte buff[] = 
 {0x20, 0x21, 0x0D, 0x20, 0x71, 0x0D, 0x20, 0xC3, 0x0D, 0x20, 0x2B, 0x0D, 0xA5, 0xBF, 0x8D, 0x20, 
0x08, 0x20, 0x00, 0x0F, 0xC9, 0x01, 0x30, 0xE8, 0xD0, 0xE9, 0xA0, 0x5C, 0x20, 0x52, 0x0D, 0xF0, 
0xE2, 0xA9, 0x00, 0xA2, 0x28, 0xD8, 0x95, 0xBF, 0xCA, 0xD0, 0xFB, 0xA2, 0x10, 0xB5, 0xCF, 0x18, 
0x75, 0xBF, 0x8D, 0x00, 0x09, 0x9D, 0xEF, 0x09, 0x30, 0x0F, 0x09, 0x80, 0x24, 0xE8, 0x50, 0x04, 
0xD5, 0xA9, 0xF0, 0x05, 0xA4, 0xE9, 0x88, 0xD0, 0xFD, 0x95, 0xA9, 0xCA, 0xD0, 0xDF, 0xE6, 0xBF, 
0xA0, 0x00, 0xA2, 0x08, 0xAD, 0x10, 0x08, 0x30, 0xFB, 0xAD, 0x10, 0x08, 0x30, 0x0F, 0x2A, 0x10, 
0xF8, 0x6A, 0x95, 0xDF, 0xCD, 0x10, 0x08, 0xF0, 0xFB, 0xCA, 0xD0, 0xED, 0x60, 0x94, 0xDF, 0x30, 
0xF8, 0xA5, 0xEA, 0x85, 0xEB, 0xA2, 0x10, 0xB5, 0xCF, 0xF0, 0x27, 0x29, 0x7F, 0x09, 0x40, 0xA0, 
0x09, 0x88, 0xF0, 0x12, 0xD9, 0xDF, 0x00, 0xD0, 0xF8, 0x95, 0xCF, 0xC6, 0xEB, 0xF0, 0x33, 0xA9, 
0x00, 0x99, 0xDF, 0x00, 0xF0, 0x04, 0x29, 0xBF, 0x95, 0xCF, 0x24, 0xE8, 0x10, 0x01, 0xCA, 0xCA, 
0xD0, 0xD5, 0xA2, 0x10, 0xA0, 0x09, 0xA9, 0x40, 0x35, 0xCF, 0xD0, 0x0E, 0x88, 0xF0, 0x13, 0xB9, 
0xDF, 0x00, 0xF0, 0xF8, 0x95, 0xCF, 0xC6, 0xEB, 0xF0, 0x08, 0x24, 0xE8, 0x10, 0x01, 0xCA, 0xCA, 
0xD0, 0xE4, 0x60, 0xA5, 0xE8, 0x10, 0x38, 0xA2, 0x10, 0xA0, 0x40, 0xB5, 0xCF, 0x2A, 0x2A, 0xB5, 
0xCE, 0x90, 0x19, 0x10, 0x0B, 0x18, 0x65, 0xBA, 0xC9, 0xBF, 0x90, 0x1B, 0xA5, 0xBE, 0xD0, 0x17, 
0xA0, 0xC0, 0xE5, 0xBB, 0xC5, 0xBC, 0x10, 0x0F, 0xA5, 0xBC, 0x10, 0x0B, 0x38, 0x09, 0x80, 0xE5, 
0xBD, 0x30, 0x04, 0xA0, 0x00, 0xA9, 0x80, 0x94, 0xBE, 0x95, 0xCE, 0xCA, 0xCA, 0xD0, 0xCA, 0x60};

void write_data_bus(byte data){
  PORTD_t &= 0b11001111; //bits 7 & 6
  PORTD_t |= (data >> 2) & 0b110000;
  PORTC_t = data & 0b00111111; //bit 5-0
  PORTD = PORTD_t;
  PORTC = PORTC_t;
}

void set_address_bus(int address){
  PORTB_t = ~address >> 2; //bits 7-2
  PORTD_t &= 0b00111111; //bits 1 & 0
  PORTD_t |= (~address << 6) & 0b11000000;
  PORTB = PORTB_t;
  PORTD = PORTD_t;
}

void fast_write(int address, byte data){
  write_data_bus(data);   //set data bus
  set_address_bus(~address); //set comp address bus
  delayMicroseconds(40);

  bitSet(PORTD_t, VGG); //set Control VDD/VGG ON
  bitSet(PORTD, VGG); //set Control VDD/VGG ON
  delayMicroseconds(150);

  set_address_bus(address); //set address bus
  delayMicroseconds(40);
  
  bitSet(PORTD, VPP); //set Program Pulse ON
  delayMicroseconds(2700);

  bitClear(PORTD, VPP); //set Program Pulse OFF
  delayMicroseconds(40);

  bitClear(PORTD_t, VGG); //set Control VDD/VGG OFF
  bitClear(PORTD, VGG); //set Control VDD/VGG OFF
  write_data_bus(0);   //powerdown
  set_address_bus(255); //powerdown
  delay(12);
  
  //Serial.print('#'); //progress indicator
}

/************************************************
 * MAIN
 *************************************************/
void setup(){
  //IO
  DDRB = 0b00111111; //Addr 2-7
  DDRD = 0b11111110; //Addr 0-1, Data 6-7, VPP, VGG, TX, RX
  DDRC = 0b00111111; //Data 0-5

  write_data_bus(0);   //powerdown
  set_address_bus(255); //powerdown
  
  //Serial.begin(57600);  //set speed of serial connection
  delay(1000);
}

void loop(){
  int dataLength = 256;
  //fill buffer
  /*
  for(int bytes; bytes < dataLength; bytes++)if(Serial.available())buffer[bytes] = Serial.read();
  Serial.println("Received 256 Bytes\n Writing to EPROM");
  */
  //program all addresses 32 times
  for(int x = 0; x < 32; x++)for(int i = 0; i < dataLength; i++)fast_write(i,buff[i]);
  
  //Serial.println('%');
  while(1); //done
}
